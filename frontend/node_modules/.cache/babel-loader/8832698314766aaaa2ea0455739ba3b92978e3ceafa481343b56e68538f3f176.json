{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\MajorProject\\\\Major-Project\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapView({\n  pgs = [],\n  selected\n}) {\n  _s();\n  // Create deterministic pseudo positions for markers if no lat/lng present\n  const markers = useMemo(() => {\n    return pgs.map((pg, idx) => {\n      const hasLocation = (pg === null || pg === void 0 ? void 0 : pg.location) && typeof pg.location.lat === 'number' && typeof pg.location.lng === 'number';\n      if (hasLocation) {\n        // Map real lat/lng to percentage roughly (not geographically accurate, placeholder)\n        const top = 50 - (pg.location.lat % 1 * 40 - 20);\n        const left = 50 + (pg.location.lng % 1 * 40 - 20);\n        return {\n          id: pg._id || idx,\n          top,\n          left,\n          name: pg.name\n        };\n      }\n      // Otherwise distribute pseudo\n      const angle = idx / Math.max(pgs.length, 1) * Math.PI * 2;\n      const top = 50 + Math.sin(angle) * 25;\n      const left = 50 + Math.cos(angle) * 25;\n      return {\n        id: pg._id || idx,\n        top,\n        left,\n        name: pg.name\n      };\n    });\n  }, [pgs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-surface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"title\",\n        children: \"Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pill\",\n        children: [pgs.length, \" places\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-body\",\n      children: [markers.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-marker\",\n        title: m.name,\n        style: {\n          top: `${m.top}%`,\n          left: `${m.left}%`,\n          transform: 'translate(-50%, -50%)'\n        }\n      }, m.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)), selected && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-marker\",\n        title: selected.name,\n        style: {\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%) scale(1.4)',\n          background: 'var(--primary)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(MapView, \"P/37rPEZMEfzYT4YsBbRL/DpqrU=\");\n_c = MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","MapView","pgs","selected","_s","markers","map","pg","idx","hasLocation","location","lat","lng","top","left","id","_id","name","angle","Math","max","length","PI","sin","cos","className","children","fileName","_jsxFileName","lineNumber","columnNumber","m","title","style","transform","background","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/MajorProject/Major-Project/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useMemo } from 'react';\r\n\r\nexport default function MapView({ pgs = [], selected }){\r\n  // Create deterministic pseudo positions for markers if no lat/lng present\r\n  const markers = useMemo(() => {\r\n    return pgs.map((pg, idx) => {\r\n      const hasLocation = pg?.location && typeof pg.location.lat === 'number' && typeof pg.location.lng === 'number';\r\n      if (hasLocation) {\r\n        // Map real lat/lng to percentage roughly (not geographically accurate, placeholder)\r\n        const top = 50 - ((pg.location.lat % 1) * 40 - 20);\r\n        const left = 50 + ((pg.location.lng % 1) * 40 - 20);\r\n        return { id: pg._id || idx, top, left, name: pg.name };\r\n      }\r\n      // Otherwise distribute pseudo\r\n      const angle = (idx / Math.max(pgs.length, 1)) * Math.PI * 2;\r\n      const top = 50 + Math.sin(angle) * 25;\r\n      const left = 50 + Math.cos(angle) * 25;\r\n      return { id: pg._id || idx, top, left, name: pg.name };\r\n    });\r\n  }, [pgs]);\r\n\r\n  return (\r\n    <div className=\"map-surface\">\r\n      <div className=\"map-toolbar\">\r\n        <span className=\"title\">Map</span>\r\n        <span className=\"pill\">{pgs.length} places</span>\r\n      </div>\r\n      <div className=\"map-body\">\r\n        {markers.map((m) => (\r\n          <div key={m.id} className=\"map-marker\" title={m.name}\r\n               style={{ top: `${m.top}%`, left: `${m.left}%`, transform: 'translate(-50%, -50%)' }} />\r\n        ))}\r\n        {selected && (\r\n          <div className=\"map-marker\" title={selected.name}\r\n               style={{ top: '50%', left: '50%', transform: 'translate(-50%, -50%) scale(1.4)', background: 'var(--primary)' }} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}